# Root Terragrunt Configuration File
# This file provides shared configuration for the dev environment.
# It is typically included by child terragrunt.hcl files using the include block.
# Terragrunt is a thin wrapper for Terraform that provides extra tools for:
# - Keeping configurations DRY (Don't Repeat Yourself)
# - Working with multiple Terraform modules
# - Managing remote state
# - Locking state files
# - Generating Terraform code dynamically

# remote_state Block
# The remote_state block configures where Terraform state is stored.
# This is crucial for collaboration and state management.
# Supported backends include: azurerm, s3, gcs, etc.
# For Azure, we use azurerm backend which stores state in Azure Storage Account.
remote_state {
  backend = "azurerm"
  config = {
    # Azure subscription ID where the storage account resides
    subscription_id      = "REPLACE_WITH_YOUR_SUBSCRIPTION_ID"
    # Resource group containing the storage account
    resource_group_name  = "eraki_terragruntdemo_rg_1001"
    # Name of the Azure Storage Account
    storage_account_name = "erakitfstateaccount17107"
    # Container within the storage account
    container_name       = "terragruntstatecontainer"
    # Key (path) for the state file. path_relative_to_include() returns the relative path
    # from the root.hcl file to the current terragrunt.hcl that includes it.
    # This ensures unique state file paths for each module/environment.
    key                  = "${path_relative_to_include()}/Dev-terragrunt.tfstate"
  }
}

# generate Block
# The generate block allows Terragrunt to dynamically generate Terraform code.
# This is useful for creating provider configurations, backend configs, etc.
# The generated file will be placed in the same directory as the including terragrunt.hcl
generate "provider" {
  # Path where the generated file will be created
  path      = "provider.tf"
  # Action if file exists: overwrite, skip, or error
  if_exists = "overwrite"
  # Contents of the generated file (Terraform HCL)
  contents  = <<EOF
# This provider.tf is auto-generated by Terragrunt
# It configures the Azure provider and sets up the backend
provider "azurerm" {
  features {}
  subscription_id = "REPLACE_WITH_YOUR_SUBSCRIPTION_ID"
}
terraform {
  backend "azurerm" {}
}
EOF
}

# Additional Terragrunt Blocks (Commented for Reference)

# terraform Block
# The terraform block allows you to override Terraform settings.
# This can include version constraints, required providers, etc.
# terraform {
#   extra_arguments "common_vars" {
#     commands = ["plan", "apply"]
#     arguments = [
#       "-var-file=../../common.tfvars"
#     ]
#   }
# }

# locals Block
# The locals block allows you to define local values that can be reused.
# Similar to Terraform locals, but at the Terragrunt level.
# locals {
#   common_tags = {
#     Environment = "dev"
#     Project     = "my-project"
#   }
# }

# Usage Notes:
# - This root.hcl is included by child terragrunt.hcl files
# - Run 'terragrunt plan' in child directories to see what changes will be made
# - Run 'terragrunt apply' to apply the changes
# - Terragrunt automatically handles state locking and unlocking
# - Use 'terragrunt plan --all' to plan across multiple modules
# - Use 'terragrunt apply --all' to apply across multiple modules
